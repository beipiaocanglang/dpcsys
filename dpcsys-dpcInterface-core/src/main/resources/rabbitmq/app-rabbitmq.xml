<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/rabbit
						http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd">
	<!-- spring-rabbit.xsd的版本要注意,很1.4以前很多功能都没有,要用跟jar包匹配的版本 -->  

	<!--配置connection-factory，指定连接rabbit server参数 -->
	<rabbit:connection-factory id="connectionFactory" host="${mq.host}" port="${mq.port}"  publisher-confirms="true"
		username="${mq.username}" password="${mq.password}" virtual-host="${mq.virtualHost}" channel-cache-size="5"/>
	<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
	<rabbit:admin connection-factory="connectionFactory"/>
	
	<!-- LSC 客户端  lsc往消息队列中放入消息  start 业务层负责接收-->
		<!--定义rabbit template用于数据的接收和发送 -->
		<rabbit:template id="amqpTemplate" exchange="dpcExchangeClient" connection-factory="connectionFactory"
		 confirm-callback="confirmCallBackListener" return-callback="returnCallBackListener"  mandatory="true"  />
		 
		<bean id="confirmCallBackListener" class="dpcsys.core.dpcInterface.rabbitmq.listenter.ConfirmCallBackListener"></bean>
		<bean id="returnCallBackListener" class="dpcsys.core.dpcInterface.rabbitmq.listenter.ReturnCallBackListener"></bean>
		
		<!-- <rabbit:queue> 标签的 name 属性就是在 RabbitMQ 服务器中 Queue 的 name。
			 <rabbit:queue> 标签的 id 属性是上面 <rabbit:binding> 标签的 queue 属性。
		 -->
		<rabbit:queue id="realTimeQueueClient" name="realTimeQueueClient" durable="true" auto-delete="false" exclusive="false" />
		<rabbit:queue id="otherQueueClient" name="otherQueueClient" durable="true" auto-delete="false" exclusive="false" />
	<!-- 测试 start -->
	<!-- <rabbit:topic-exchange name="dpcExchangeClient" durable="true" auto-delete="false">
		    <rabbit:bindings>
		        <rabbit:binding queue="realTimeQueueClient" pattern="realTimeClient"/>
		        <rabbit:binding queue="otherQueueClient" pattern="otherClient"/>
		    </rabbit:bindings>
		</rabbit:topic-exchange> -->
	<!-- 测试 end -->
		<!-- 消息接收者 -->
	    <bean id="realTimeListenter" class="dpcsys.core.dpcInterface.rabbitmq.listenter.RealTimeListenter"></bean>
	    <bean id="otherListenter" class="dpcsys.core.dpcInterface.rabbitmq.listenter.OtherListenter"></bean>
		<!-- 
			queues：监听的队列，多个的话用逗号（,）分隔 
			ref：监听器
	 	-->
		<!-- 
			监听配置  
			acknowledge="auto" 自动确认,自动确认会在消息发送给消费者后立即确认
			acknowledge="manual" 手动确认,需要反馈给rabbitmq处理成功与否,手动则当消费者调用ack,nack,reject几种方法时进行确认.
			concurrency="2" 对每个listener在初始化的时候设置的并发消费者的个数
			prefetch="3" 每次从一次性从broker里面取的待消费的消息的个数
			每个消费者对应的listener有个Exclusive参数，默认为false, 如果设置为true，concurrency就必须设置为1，即只能单个消费者消费队列里的消息，适用于必须严格执行消息队列的消费顺序（先进先出）
		-->
		<rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual">
		    <rabbit:listener queues="realTimeQueueClient" ref="realTimeListenter"/>
		    <rabbit:listener queues="otherQueueClient" ref="otherListenter"/>  
		</rabbit:listener-container>
		
	<!-- LSC 客户端  lsc往消息队列中放入消息  end -->
	
	<!-- LSC 服务端  lsc接收消息  业务层放入消息 start -->
		<!--定义rabbit template用于数据的接收和发送 -->
		<rabbit:template id="amqpTemplate" exchange="dpcExchangeService" connection-factory="connectionFactory"  />
		
		<rabbit:queue id="realTimeQueueService" name="realTimeQueueService" durable="true" auto-delete="false" exclusive="false" />
		<rabbit:queue id="otherQueueService" name="otherQueueService" durable="true" auto-delete="false" exclusive="false" />
		
		<!-- 
			<rabbit:top-exchange> 标签的 name 属性就是在 RabbitMQ 服务器配置交换机的 name 值。
			<rabbit:binding> 标签的 queue 属性是下面 <queue> 标签的 id 属性。
			<rabbit:binding> 标签的 pattern 属性是在 RabbitMQ 服务器配置交换机与队列绑定时的 Routing key 值（路由）
			rabbit:direct-exchange：定义exchange模式为direct，意思就是消息与一个特定的路由键完全匹配，才会转发。
		 -->
		<rabbit:topic-exchange name="dpcExchangeService" durable="true" auto-delete="false">
		    <rabbit:bindings>
		        <rabbit:binding queue="realTimeQueueService" pattern="realTimeService"/>
		        <rabbit:binding queue="otherQueueService" pattern="otherService"/>
		    </rabbit:bindings>
		</rabbit:topic-exchange>
		
<!--  		<bean id="realTimeListenterService" class="dpcsys.core.dpcInterface.rabbitmq.service.listenter.RealTimeListenter"></bean> -->
<!-- 	    <bean id="otherListenterService" class="dpcsys.core.dpcInterface.rabbitmq.service.listenter.OtherListenter"></bean> -->
	    
<!-- 	    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto"> -->
<!-- 		    <rabbit:listener queues="realTimeQueueService" ref="realTimeListenterService"/> -->
<!-- 		    <rabbit:listener queues="otherQueueService" ref="otherListenterService"/>   -->
<!-- 		</rabbit:listener-container>  -->
	<!-- LSC 服务端  lsc接收消息 业务层放入消息  end -->
</beans>