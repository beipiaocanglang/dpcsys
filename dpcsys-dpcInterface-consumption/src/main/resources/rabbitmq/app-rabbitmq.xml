<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/rabbit
						http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

	<!--配置connection-factory，指定连接rabbit server参数 -->
	<rabbit:connection-factory 
		id="connectionFactory" host="${mq.host}" port="${mq.port}" 
		username="${mq.username}" password="${mq.password}" virtual-host="${mq.virtualHost}"
		channel-cache-size="5"/>
        
	<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
	<rabbit:admin connection-factory="connectionFactory"/>
	
	<!--定义rabbit template用于数据的接收和发送 -->
	<rabbit:template id="amqpTemplate" exchange="demoExchange" connection-factory="connectionFactory"  />
	
	<!-- 
	<rabbit:queue> 标签的 name 属性就是在 RabbitMQ 服务器中 Queue 的 name。
	<rabbit:queue> 标签的 id 属性是上面 <rabbit:binding> 标签的 queue 属性。
	 -->
	<rabbit:queue id="demoQueue" name="demoQueue" durable="true" auto-delete="false" exclusive="false" />
	
	
	<!-- 
	<rabbit:top-exchange> 标签的 name 属性就是在 RabbitMQ 服务器配置交换机的 name 值。
	<rabbit:binding> 标签的 queue 属性是下面 <queue> 标签的 id 属性。
	<rabbit:binding> 标签的 pattern 属性是在 RabbitMQ 服务器配置交换机与队列绑定时的 Routing key 值（路由）
	 -->
	<rabbit:topic-exchange name="demoExchange" durable="true" auto-delete="false">
	    <rabbit:bindings>
	        <rabbit:binding queue="demoQueue" pattern="demo"/>
	    </rabbit:bindings>
	</rabbit:topic-exchange>
	
	<!-- 消息接收者 -->
    <bean id="queueListenter" class="faner.dplatformSpringjdbc.consumption.demo.rabbitmq.listenter.autoconfirm.QueueListenter"></bean>
	<!--<bean id="queue2Listenter" class="faner.dplatformSpringjdbc.consumption.demo.rabbitmq.listenter.autoconfirm.Queue2Listenter"></bean> -->
	<!-- 
		queues：监听的队列，多个的话用逗号（,）分隔 
		ref：监听器
 	-->
	<!-- 
	监听配置  
	acknowledge="auto" 自动确认,自动确认会在消息发送给消费者后立即确认
	acknowledge="manual" 手动确认,需要反馈给rabbitmq处理成功与否,手动则当消费者调用ack,nack,reject几种方法时进行确认.
	concurrency="2" 对每个listener在初始化的时候设置的并发消费者的个数
	prefetch="3" 每次从一次性从broker里面取的待消费的消息的个数
	每个消费者对应的listener有个Exclusive参数，默认为false, 如果设置为true，concurrency就必须设置为1，即只能单个消费者消费队列里的消息，适用于必须严格执行消息队列的消费顺序（先进先出）
	-->
	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto" concurrency="100" prefetch="100">
	    <rabbit:listener queues="demoQueue" ref="queueListenter"/>
	</rabbit:listener-container>
<!-- 	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto" concurrency="10"> -->
<!-- 	    <rabbit:listener queues="demoQueue" ref="queue2Listenter"/> -->
<!-- 	</rabbit:listener-container> -->
    
<!-- 	<bean id="receiveConfirmTestListenter" class="faner.dplatformSpringjdbc.consumption.demo.rabbitmq.listenter.manual.ReceiveConfirmTestListenter"></bean> -->
<!-- 	<rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual"> -->
<!-- 	    <rabbit:listener queues="demoQueue" ref="receiveConfirmTestListenter"/> -->
<!-- 	</rabbit:listener-container> -->
	
</beans>